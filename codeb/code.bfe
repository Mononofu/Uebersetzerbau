%{
#define CODE

#include <stdio.h>
#include <stdlib.h>
#include <assert.h>

#include "tree.h"
#include "helpers.h"

/* TODO (-a)+b */
/* TODO func f(a,a) return a; end; shall do the same as func f(b,a) return a; end; */

%}

%start stat
%term OP_NOT=1 OP_AND=2 OP_OR=3 OP_EQ=4 OP_GT=5 OP_GEQ=6 OP_LS=7 OP_LEQ=8 OP_NEQ=9 OP_ADD=10 OP_MUL=11 OP_NEG=12 OP_ID=13 OP_Number=14 OP_Field=15 OP_Return=16 OP_Zero=17 OP_One=18 OP_Args=19 OP_Call=20 OP_ReadMem=21 OP_IF=22 OP_Stats=23 OP_NOP=24 OP_Assign=25 OP_WriteMem=26

%%

stat:    ret                              # 0 #
stat:    OP_IF(expr)                      # 2 # printf("\tand $1, %%%s\n\tjz if_end_%d\n", bnode->kids[0]->reg, bnode->param_index); freereg(bnode->kids[0]->reg);
stat:    OP_IF(imm)                       # 0 # if( bnode->kids[0]->value & 1) { printf("/* always true */\n"); } else { printf("/* always false\n"); }
stat:    OP_IF(OP_LEQ(expr, expr))        # 2 # printf("\tcmpq %%%s, %%%s\n\tjg if_end_%d\n", bnode->kids[0]->kids[1]->reg, bnode->kids[0]->kids[0]->reg, bnode->param_index); freereg(bnode->kids[0]->kids[0]->reg); freereg(bnode->kids[0]->kids[1]->reg); 
stat:    OP_IF(OP_LEQ(imm, expr))         # 2 # printf("\tcmpq %%%s, $%li\n\tjg if_end_%d\n", bnode->kids[0]->kids[1]->reg, bnode->kids[0]->kids[0]->value,  bnode->param_index); freereg(bnode->kids[0]->kids[1]->reg); 
stat:    OP_IF(OP_LEQ(expr, imm))         # 2 # printf("\tcmpq $%li, %%%s\n\tjg if_end_%d\n", bnode->kids[0]->kids[1]->value, bnode->kids[0]->kids[0]->reg, bnode->param_index); freereg(bnode->kids[0]->kids[0]->reg); 

stat:    OP_IF(OP_NEQ(expr, expr))        # 2 # printf("\tcmpq %%%s, %%%s\n\tje if_end_%d\n", bnode->kids[0]->kids[1]->reg, bnode->kids[0]->kids[0]->reg, bnode->param_index); freereg(bnode->kids[0]->kids[0]->reg); freereg(bnode->kids[0]->kids[1]->reg); 
stat:    OP_IF(OP_NEQ(imm, expr))         # 2 # printf("\tcmpq %%%s, $%li\n\tje if_end_%d\n", bnode->kids[0]->kids[1]->reg, bnode->kids[0]->kids[0]->value,  bnode->param_index); freereg(bnode->kids[0]->kids[1]->reg); 
stat:    OP_IF(OP_NEQ(expr, imm))         # 2 # printf("\tcmpq $%li, %%%s\n\tje if_end_%d\n", bnode->kids[0]->kids[1]->value, bnode->kids[0]->kids[0]->reg, bnode->param_index); freereg(bnode->kids[0]->kids[0]->reg);

stat:    OP_IF(OP_NOT(OP_LEQ(expr, expr)))      # 2 # printf("\tcmpq %%%s, %%%s\n\tjle if_end_%d\n", bnode->kids[0]->kids[0]->kids[1]->reg, bnode->kids[0]->kids[0]->kids[0]->reg, bnode->param_index); freereg(bnode->kids[0]->kids[0]->kids[0]->reg); freereg(bnode->kids[0]->kids[0]->kids[1]->reg); 
stat:    OP_IF(OP_NOT(OP_LEQ(imm, expr)))       # 2 # printf("\tcmpq %%%s, $%li\n\tjle if_end_%d\n", bnode->kids[0]->kids[0]->kids[1]->reg, bnode->kids[0]->kids[0]->kids[0]->value,  bnode->param_index); freereg(bnode->kids[0]->kids[0]->kids[1]->reg); 
stat:    OP_IF(OP_NOT(OP_LEQ(expr, imm)))       # 2 # printf("\tcmpq $%li, %%%s\n\tjle if_end_%d\n", bnode->kids[0]->kids[0]->kids[1]->value, bnode->kids[0]->kids[0]->kids[0]->reg, bnode->param_index); freereg(bnode->kids[0]->kids[0]->kids[0]->reg);

stat:    OP_IF(OP_NOT(OP_NEQ(expr, expr)))      # 2 # printf("\tcmpq %%%s, %%%s\n\tjne if_end_%d\n", bnode->kids[0]->kids[0]->kids[1]->reg, bnode->kids[0]->kids[0]->kids[0]->reg, bnode->param_index); freereg(bnode->kids[0]->kids[0]->kids[0]->reg); freereg(bnode->kids[0]->kids[0]->kids[1]->reg); 
stat:    OP_IF(OP_NOT(OP_NEQ(imm, expr)))       # 2 # printf("\tcmpq %%%s, $%li\n\tjne if_end_%d\n", bnode->kids[0]->kids[0]->kids[1]->reg, bnode->kids[0]->kids[0]->kids[0]->value,  bnode->param_index); freereg(bnode->kids[0]->kids[0]->kids[1]->reg); 
stat:    OP_IF(OP_NOT(OP_NEQ(expr, imm)))       # 2 # printf("\tcmpq $%li, %%%s\n\tjne if_end_%d\n", bnode->kids[0]->kids[0]->kids[1]->value, bnode->kids[0]->kids[0]->kids[0]->reg, bnode->param_index); freereg(bnode->kids[0]->kids[0]->kids[0]->reg);

stat:    OP_Assign(OP_ID, expr)           # 1 # bnode->reg = reg_for_var(bnode->kids[0]->name); move(bnode->kids[1]->reg, bnode->reg); freereg(bnode->kids[1]->reg);
stat:    OP_Assign(OP_WriteMem(expr), expr)  # 1 # printf("\tmovq %%%s, (%%%s)\n", bnode->kids[1]->reg, bnode->kids[0]->kids[0]->reg); freereg(bnode->kids[0]->kids[0]->reg); freereg(bnode->kids[1]->reg); 
stat:    OP_Assign(imm, expr)             # 1 # printf("\tmovq %%%s, %li()\n", bnode->kids[1]->reg, bnode->kids[0]->value);  freereg(bnode->kids[1]->reg); 
stat:    OP_Assign(imm, imm)              # 1 # printf("\tmovq $%li, %li()\n", bnode->kids[1]->value, bnode->kids[0]->value);


ret:     OP_Return(expr)                  # 1 # freereg(bnode->kids[0]->reg); move(bnode->kids[0]->reg, "rax"); ret(); 
ret:     OP_Return(imm)                   # 1 # printf("\tmovq $%li, %%rax\n", bnode->kids[0]->value); ret();
ret:     OP_Return(OP_ADD(expr, expr))    # 1 # printf("\tlea (%%%s, %%%s, 1), %%rax\n", bnode->kids[0]->kids[0]->reg, bnode->kids[0]->kids[1]->reg); freereg(bnode->kids[0]->kids[0]->reg); freereg(bnode->kids[0]->kids[1]->reg); ret();
ret:     OP_Return(OP_ADD(imm, expr))     # 1 # printf("\tlea %li(%%%s), %%rax\n", bnode->kids[0]->kids[0]->value, bnode->kids[0]->kids[1]->reg); freereg(bnode->kids[0]->kids[1]->reg); ret();
ret:     OP_Return(OP_ADD(expr, imm))     # 1 # printf("\tlea %li(%%%s), %%rax\n", bnode->kids[0]->kids[1]->value, bnode->kids[0]->kids[0]->reg); freereg(bnode->kids[0]->kids[0]->reg); ret();
ret:     OP_Return(OP_ADD(epc, epc))      # 1 # freereg(bnode->kids[0]->kids[0]->reg); freereg(bnode->kids[0]->kids[1]->reg); printf("\tlea %li(%%%s, %%%s, 1), %%rax\n", bnode->kids[0]->kids[0]->value + bnode->kids[0]->kids[1]->value, bnode->kids[0]->kids[0]->reg, bnode->kids[0]->kids[1]->reg); ret();
ret:     OP_Return(OP_ADD(epc, imm))      # 1 # freereg(bnode->kids[0]->kids[0]->reg); printf("\tlea %li(%%%s), %%rax\n", bnode->kids[0]->kids[0]->value + bnode->kids[0]->kids[1]->value, bnode->kids[0]->kids[0]->reg); ret();
ret:     OP_Return(OP_ADD(imm, epc))      # 1 # freereg(bnode->kids[0]->kids[1]->reg); printf("\tlea %li(%%%s), %%rax\n", bnode->kids[0]->kids[0]->value + bnode->kids[0]->kids[1]->value, bnode->kids[0]->kids[1]->reg); ret();
ret:     OP_Return(OP_MUL(imm, etc))      # 1 # printf("\timul $%li, %%%s, %%rax\n", bnode->kids[0]->kids[0]->value * bnode->kids[0]->kids[1]->value, bnode->kids[0]->kids[1]->reg); freereg(bnode->kids[0]->kids[1]->reg); ret();
ret:     OP_Return(OP_MUL(etc, imm))      # 1 # printf("\timul $%li, %%%s, %%rax\n", bnode->kids[0]->kids[0]->value * bnode->kids[0]->kids[1]->value, bnode->kids[0]->kids[0]->reg); freereg(bnode->kids[0]->kids[0]->reg); ret();


expr:    OP_ID                            # 0 # bnode->reg = reg_for_var(bnode->name); 
expr:    imm                              # 1 # bnode->reg = newreg(); printf("\tmovq $%li, %%%s\n", bnode->value, bnode->reg);
expr:    call                             # 0 # 

expr:    OP_NOT(expr)                     # 2 # freereg(bnode->kids[0]->reg); bnode->reg = newreg(); move(bnode->kids[0]->reg, bnode->reg);  printf("\tnot %%%s\n", bnode->reg);
expr:    OP_NOT(OP_NOT(expr))             # 0 # bnode->reg = bnode->kids[0]->kids[0]->reg; 

expr:    OP_NEG(expr)                     # 1 # freereg(bnode->kids[0]->reg); bnode->reg = newreg(); printf("\timul $-1, %%%s, %%%s\n", bnode->kids[0]->reg, bnode->reg);
expr:    OP_NEG(OP_NEG(expr))             # 0 # bnode->reg = bnode->kids[0]->kids[0]->reg; 

expr:    OP_ADD(expr,expr)                # 1 # free_childs_alloc_reg(bnode); printf("\tlea (%%%s, %%%s, 1), %%%s\n", bnode->kids[1]->reg, bnode->kids[0]->reg, bnode->reg);
expr:    OP_ADD(imm,expr)                 # 1 # free_childs_alloc_reg(bnode); printf("\tlea %li(%%%s), %%%s\n", bnode->kids[0]->value, bnode->kids[1]->reg, bnode->reg);
expr:    OP_ADD(expr,imm)                 # 1 # free_childs_alloc_reg(bnode); printf("\tlea %li(%%%s), %%%s\n", bnode->kids[1]->value, bnode->kids[0]->reg, bnode->reg);
expr:    OP_ADD(expr,zero)                # 0 # bnode->reg = bnode->kids[0]->reg;
expr:    OP_ADD(zero,expr)                # 0 # bnode->reg = bnode->kids[1]->reg;
expr:    OP_ADD(expr, OP_ADD(expr, imm))  # 1 # freereg(bnode->kids[0]->reg); freereg(bnode->kids[1]->kids[0]->reg); bnode->reg = newreg(); printf("\tlea %li(%%%s, %%%s, 1), %%%s\n", bnode->kids[1]->kids[1]->value, bnode->kids[1]->kids[0]->reg, bnode->kids[0]->reg, bnode->reg);
expr:    OP_ADD(expr, OP_ADD(imm, expr))  # 1 # freereg(bnode->kids[0]->reg); freereg(bnode->kids[1]->kids[1]->reg); bnode->reg = newreg(); printf("\tlea %li(%%%s, %%%s, 1), %%%s\n", bnode->kids[1]->kids[0]->value, bnode->kids[1]->kids[1]->reg, bnode->kids[0]->reg, bnode->reg);
expr:    OP_ADD(OP_ADD(expr, imm), expr)  # 1 # freereg(bnode->kids[1]->reg); freereg(bnode->kids[0]->kids[0]->reg); bnode->reg = newreg(); printf("\tlea %li(%%%s, %%%s, 1), %%%s\n", bnode->kids[0]->kids[1]->value, bnode->kids[0]->kids[0]->reg, bnode->kids[1]->reg, bnode->reg);
expr:    OP_ADD(OP_ADD(imm, expr), expr)  # 1 # freereg(bnode->kids[1]->reg); freereg(bnode->kids[0]->kids[1]->reg); bnode->reg = newreg(); printf("\tlea %li(%%%s, %%%s, 1), %%%s\n", bnode->kids[0]->kids[0]->value, bnode->kids[0]->kids[1]->reg, bnode->kids[1]->reg, bnode->reg);
expr:    OP_ADD(OP_ADD(expr, expr), imm)  # 1 # freereg(bnode->kids[0]->kids[0]->reg);  freereg(bnode->kids[0]->kids[1]->reg); bnode->reg = newreg(0);  printf("\tlea %li(%%%s, %%%s, 1), %%%s\n", bnode->kids[1]->value, bnode->kids[0]->kids[0]->reg, bnode->kids[0]->kids[1]->reg, bnode->reg);
expr:    OP_ADD(imm, OP_ADD(expr, expr))  # 1 # freereg(bnode->kids[1]->kids[0]->reg);  freereg(bnode->kids[1]->kids[1]->reg); bnode->reg = newreg(0);  printf("\tlea %li(%%%s, %%%s, 1), %%%s\n", bnode->kids[0]->value, bnode->kids[1]->kids[0]->reg, bnode->kids[1]->kids[1]->reg, bnode->reg);


expr:    OP_MUL(expr,expr)                # 1 # freereg(bnode->kids[0]->reg); freereg(bnode->kids[1]->reg); if(get_reg_usage(bnode->kids[0]->reg) == 0) { claimreg(bnode->kids[0]->reg); bnode->reg = bnode->kids[0]->reg; printf("\timul %%%s, %%%s\n", bnode->kids[1]->reg, bnode->reg); } else if(get_reg_usage(bnode->kids[1]->reg) == 0) { claimreg(bnode->kids[1]->reg); bnode->reg = bnode->kids[1]->reg; printf("\timul %%%s, %%%s\n", bnode->kids[0]->reg, bnode->reg); } else { bnode->reg = newreg(); move(bnode->kids[0]->reg, bnode->reg); printf("\timul %%%s, %%%s\n", bnode->kids[1]->reg, bnode->reg); }
expr:    OP_MUL(imm,expr)                 # 1 # free_childs_alloc_reg(bnode); printf("\timul $%li, %%%s, %%%s\n", bnode->kids[0]->value, bnode->kids[1]->reg, bnode->reg);
expr:    OP_MUL(expr,imm)                 # 1 # free_childs_alloc_reg(bnode); printf("\timul $%li, %%%s, %%%s\n", bnode->kids[1]->value, bnode->kids[0]->reg, bnode->reg);
expr:    OP_MUL(OP_NEG(expr), OP_NEG(expr))   # 1 # freereg(bnode->kids[0]->kids[0]->reg); freereg(bnode->kids[1]->kids[0]->reg); if(get_reg_usage(bnode->kids[0]->kids[0]->reg) == 0) { claimreg(bnode->kids[0]->kids[0]->reg); bnode->reg = bnode->kids[0]->kids[0]->reg; printf("\timul %%%s, %%%s\n", bnode->kids[1]->kids[0]->reg, bnode->reg); } else if(get_reg_usage(bnode->kids[1]->kids[0]->reg) == 0) { claimreg(bnode->kids[1]->kids[0]->reg); bnode->reg = bnode->kids[1]->kids[0]->reg; printf("\timul %%%s, %%%s\n", bnode->kids[0]->kids[0]->reg, bnode->reg); } else { bnode->reg = newreg(); move(bnode->kids[0]->kids[0]->reg, bnode->reg); printf("\timul %%%s, %%%s\n", bnode->kids[1]->kids[0]->reg, bnode->reg); }

expr:    OP_AND(expr, expr)               # 1 # freereg(bnode->kids[0]->reg); freereg(bnode->kids[1]->reg); if(get_reg_usage(bnode->kids[0]->reg) == 0) { claimreg(bnode->kids[0]->reg); bnode->reg = bnode->kids[0]->reg; printf("\tand %%%s, %%%s\n", bnode->kids[1]->reg, bnode->reg); } else if(get_reg_usage(bnode->kids[1]->reg) == 0) { claimreg(bnode->kids[1]->reg); bnode->reg = bnode->kids[1]->reg; printf("\tand %%%s, %%%s\n", bnode->kids[0]->reg, bnode->reg); } else { bnode->reg = newreg(); move(bnode->kids[1]->reg, bnode->reg); printf("\tand %%%s, %%%s\n", bnode->kids[0]->reg, bnode->reg); }
expr:    OP_AND(imm, expr)                # 2 # freereg(bnode->kids[1]->reg); bnode->reg = newreg(); move(bnode->kids[1]->reg, bnode->reg); printf("\tand $%li, %%%s\n", bnode->kids[0]->value, bnode->reg); 
expr:    OP_AND(expr, imm)                # 2 # freereg(bnode->kids[0]->reg); bnode->reg = newreg(); move(bnode->kids[0]->reg, bnode->reg); printf("\tand $%li, %%%s\n", bnode->kids[1]->value, bnode->reg); 

expr:    OP_NEQ(expr, expr)               # 3 # bnode->reg = newreg(); printf("\txor %%%s, %%%s\n", bnode->reg, bnode->reg);  printf("\tcmpq %%%s, %%%s\n", bnode->kids[1]->reg, bnode->kids[0]->reg); printf("\tsetne %%%s\n", get_8bit_reg(bnode->reg)); freereg(bnode->kids[0]->reg); freereg(bnode->kids[1]->reg); 
expr:    OP_NEQ(imm, expr)                # 3 # bnode->reg = newreg(); printf("\txor %%%s, %%%s\n", bnode->reg, bnode->reg);  printf("\tcmpq $%li, %%%s\n", bnode->kids[0]->value, bnode->kids[1]->reg); printf("\tsetne %%%s\n", get_8bit_reg(bnode->reg)); freereg(bnode->kids[1]->reg); 
expr:    OP_NEQ(expr, imm)                # 3 # bnode->reg = newreg(); printf("\txor %%%s, %%%s\n", bnode->reg, bnode->reg);  printf("\tcmpq $%li, %%%s\n", bnode->kids[1]->value, bnode->kids[0]->reg); printf("\tsetne %%%s\n", get_8bit_reg(bnode->reg)); freereg(bnode->kids[0]->reg); 

expr:    OP_LEQ(expr, expr)               # 3 # bnode->reg = newreg(); printf("\txor %%%s, %%%s\n", bnode->reg, bnode->reg);  printf("\tcmpq %%%s, %%%s\n", bnode->kids[1]->reg, bnode->kids[0]->reg); printf("\tsetle %%%s\n", get_8bit_reg(bnode->reg)); freereg(bnode->kids[0]->reg); freereg(bnode->kids[1]->reg); 
expr:    OP_LEQ(imm, expr)                # 3 # bnode->reg = newreg(); printf("\txor %%%s, %%%s\n", bnode->reg, bnode->reg);  printf("\tcmpq $%li, %%%s\n", bnode->kids[0]->value, bnode->kids[1]->reg); printf("\tsetle %%%s\n", get_8bit_reg(bnode->reg)); freereg(bnode->kids[1]->reg); 
expr:    OP_LEQ(expr, imm)                # 3 # bnode->reg = newreg(); printf("\txor %%%s, %%%s\n", bnode->reg, bnode->reg);  printf("\tcmpq $%li, %%%s\n", bnode->kids[1]->value, bnode->kids[0]->reg); printf("\tsetle %%%s\n", get_8bit_reg(bnode->reg)); freereg(bnode->kids[0]->reg); 

expr:    OP_NOT(OP_NEQ(expr, expr))       # 3 # bnode->reg = newreg(); printf("\txor %%%s, %%%s\n", bnode->reg, bnode->reg);  printf("\tcmpq %%%s, %%%s\n", bnode->kids[0]->kids[1]->reg, bnode->kids[0]->kids[0]->reg); printf("\tsete %%%s\n", get_8bit_reg(bnode->reg)); freereg(bnode->kids[0]->kids[0]->reg); freereg(bnode->kids[0]->kids[1]->reg); 
expr:    OP_NOT(OP_NEQ(imm, expr))        # 3 # bnode->reg = newreg(); printf("\txor %%%s, %%%s\n", bnode->reg, bnode->reg);  printf("\tcmpq $%li, %%%s\n", bnode->kids[0]->kids[0]->value, bnode->kids[0]->kids[1]->reg); printf("\tsete %%%s\n", get_8bit_reg(bnode->reg)); freereg(bnode->kids[0]->kids[1]->reg); 
expr:    OP_NOT(OP_NEQ(expr, imm))        # 3 # bnode->reg = newreg(); printf("\txor %%%s, %%%s\n", bnode->reg, bnode->reg);  printf("\tcmpq $%li, %%%s\n", bnode->kids[0]->kids[1]->value, bnode->kids[0]->kids[0]->reg); printf("\tsete %%%s\n", get_8bit_reg(bnode->reg)); freereg(bnode->kids[0]->kids[0]->reg); 


expr:    OP_NOT(OP_LEQ(expr, expr))       # 3 # bnode->reg = newreg(); printf("\txor %%%s, %%%s\n", bnode->reg, bnode->reg);  printf("\tcmpq %%%s, %%%s\n", bnode->kids[0]->kids[1]->reg, bnode->kids[0]->kids[0]->reg); printf("\tsetg %%%s\n", get_8bit_reg(bnode->reg)); freereg(bnode->kids[0]->kids[0]->reg); freereg(bnode->kids[0]->kids[1]->reg); 
expr:    OP_NOT(OP_LEQ(imm, expr))        # 3 # bnode->reg = newreg(); printf("\txor %%%s, %%%s\n", bnode->reg, bnode->reg);  printf("\tcmpq $%li, %%%s\n", bnode->kids[0]->kids[0]->value, bnode->kids[0]->kids[1]->reg); printf("\tsetg %%%s\n", get_8bit_reg(bnode->reg)); freereg(bnode->kids[0]->kids[1]->reg); 
expr:    OP_NOT(OP_LEQ(expr, imm))        # 3 # bnode->reg = newreg(); printf("\txor %%%s, %%%s\n", bnode->reg, bnode->reg);  printf("\tcmpq $%li, %%%s\n", bnode->kids[0]->kids[1]->value, bnode->kids[0]->kids[0]->reg); printf("\tsetg %%%s\n", get_8bit_reg(bnode->reg)); freereg(bnode->kids[0]->kids[0]->reg); 



expr:    OP_ReadMem(expr)                 # 1 # freereg(bnode->kids[0]->reg); bnode->reg = newreg(); printf("\tmovq (%%%s), %%%s\n", bnode->kids[0]->reg, bnode->reg);
expr:    OP_ReadMem(imm)                  # 1 # bnode->reg = newreg(); printf("\tmovq ($%li), %%%s\n", bnode->kids[0]->value, bnode->reg);
expr:    OP_ReadMem(OP_ADD(expr, imm))    # 1 # freereg(bnode->kids[0]->kids[0]->reg); bnode->reg = newreg(); printf("\tmovq  %li(%%%s), %%%s\n", bnode->kids[0]->kids[1]->value, bnode->kids[0]->kids[0]->reg, bnode->reg);
expr:    OP_ReadMem(OP_ADD(imm, expr))    # 1 # freereg(bnode->kids[0]->kids[1]->reg); bnode->reg = newreg(); printf("\tmovq  %li(%%%s), %%%s\n", bnode->kids[0]->kids[0]->value, bnode->kids[0]->kids[1]->reg, bnode->reg);


epc:      expr                            # 0 #   /* constant folding: expression plus constant */
epc:      OP_ADD(epc, imm)                # 0 # bnode->reg = bnode->kids[0]->reg; bnode->value = bnode->kids[0]->value + bnode->kids[1]->value;
epc:      OP_ADD(imm, epc)                # 0 # bnode->reg = bnode->kids[1]->reg; bnode->value = bnode->kids[0]->value + bnode->kids[1]->value;
expr:     OP_ADD(epc, epc)                # 1 # free_childs_alloc_reg(bnode); printf("\tlea %li(%%%s, %%%s, 1), %%%s\n", bnode->kids[0]->value + bnode->kids[1]->value, bnode->kids[0]->reg, bnode->kids[1]->reg, bnode->reg);
expr:     epc                             # 1 # { if(bnode->value != 0) { char* tmp = bnode->reg; bnode->reg = newreg(); printf("\tlea %li(%%%s), %%%s\n", bnode->value, tmp, bnode->reg); bnode->value = 0; } }


etc:      expr                            # 0 # bnode->value = 1;  /* constant folding: expression times constant */
etc:      OP_MUL(etc, imm)                # 0 # bnode->reg = bnode->kids[0]->reg; bnode->value = bnode->kids[0]->value * bnode->kids[1]->value;
etc:      OP_MUL(imm, etc)                # 0 # bnode->reg = bnode->kids[1]->reg; bnode->value = bnode->kids[0]->value * bnode->kids[1]->value;
expr:     OP_MUL(etc, etc)                # 2 # bnode->reg = newreg(); printf("\timul $%li, %%%s, %%%s\n", bnode->kids[0]->value * bnode->kids[1]->value, bnode->kids[0]->reg, bnode->reg); freereg(bnode->kids[0]->reg); freereg(bnode->kids[1]->reg); printf("\timul %%%s, %%%s\n", bnode->kids[1]->reg, bnode->reg);
expr:     etc                             # 1 # { if(bnode->value == 1) { bnode->value = 0; } else { char* tmp = bnode->reg; bnode->reg = newreg(); printf("\timul $%li, %%%s, %%%s\n", bnode->value, tmp, bnode->reg); bnode->value = 0; } }

call:    OP_Call(OP_ID,exprs)             # 0 # /* ignore at the moment */

exprs:    expr                            # 0 #
exprs:    OP_Args(exprs,expr)             # 0 #

zero:    OP_Zero                          # 0 #
zero:    OP_NEG(zero)                     # 0 #
zero:    OP_MUL(zexpr,zero)               # 0 #
zero:    OP_MUL(zero,zexpr)               # 0 #

zexpr:    zero                            # 0 #
zexpr:    imm                             # 0 #
zexpr:    OP_ADD(zexpr,zexpr)             # 0 #
zexpr:    OP_NEG(zexpr)                   # 0 #
zexpr:    OP_MUL(zexpr,zexpr)             # 0 #
zexpr:    OP_Field(zexpr,OP_ID)           # 0 #
zexpr:    OP_ID                           # 0 #

imm:    zero                              # 0 #
imm:    OP_NEG(imm)                       # 0 # bnode->value= - (bnode->kids[0]->value);
imm:    OP_NOT(imm)                       # 0 # bnode->value= ~ (bnode->kids[0]->value);
imm:    OP_ADD(imm,imm)                   # 0 # bnode->value=bnode->kids[0]->value+bnode->kids[1]->value;
imm:    OP_MUL(imm,imm)                   # 0 # bnode->value=bnode->kids[0]->value*bnode->kids[1]->value;
imm:    OP_Number                         # 0 # 
imm:    OP_Zero                           # 0 # 
imm:    OP_One                            # 0 # 

%%


